import type { GetServerSideProps, NextPage } from "next";
import Head from "next/head";
import { useRouter } from "next/router";
import { useRef, useState } from "react";
import { ProductType } from "../../interfaces/interfaces";
import ProductItem from "../../components/ProductItem";

interface Props {
  productData: ProductType[];
}

const Shop: NextPage<Props> = ({ productData }) => {
  const router = useRouter();
  const searchRef = useRef<HTMLInputElement>(null);
  const [currentPage, setCurrentPage] = useState<number>(1);

  const isQueryEmpty = Object.keys(router.query).length === 0;

  const handleFilterByGender = (gender: string) => {
    router.push({
      pathname: "/shop",
      query: {
        ...router.query,
        gender: gender,
      },
    });
    setCurrentPage(1);
  };

  const handleFilterByQ = (q: string) => {
    router.push({
      pathname: "/shop",
      query: {
        ...router.query,
        q: q,
      },
    });
    setCurrentPage(1);
  };

  const filteringBySearchRefValue = (value: string | undefined) => {
    searchRef.current?.value === ""
      ? router.push({
          pathname: "/shop",
        })
      : router.push({
          pathname: "/shop",
          query: {
            ...router.query,
            q: value,
          },
        });
    setCurrentPage(1);
  };

  const totalPages = Math.ceil(productData.length / 4);

  const start = (currentPage - 1) * 4;
  const end = start + 4;
  const paginationProductsForDisplaying = productData.slice(start, end);

  const handlePage = (page: number) => {
    setCurrentPage(page);
  };

  return (
    <>
      <Head>
        <title>Store</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div className="bg0 m-t-23 p-b-140">
        <div className="container">
          <div className="flex-w flex-sb-m p-b-52">
            <div className="flex-w flex-l-m filter-tope-group m-tb-10">
              <button
                className={`${
                  isQueryEmpty ? "how-active1" : ""
                } stext-106 cl6 hov1 bor3 trans-04 m-r-32 m-tb-5`}
                data-filter="*"
                onClick={() => {
                  router.push({
                    pathname: "/shop",
                  });
                  setCurrentPage(1);
                }}>
                All Products
              </button>

              <button
                className={`${
                  router.query.gender === "women" ? "how-active1" : ""
                } stext-106 cl6 hov1 bor3 trans-04 m-r-32 m-tb-5`}
                data-filter=".women"
                onClick={() => {
                  handleFilterByGender("women");
                }}>
                Women
              </button>

              <button
                className={`${
                  router.query.gender === "man" ? "how-active1" : ""
                } stext-106 cl6 hov1 bor3 trans-04 m-r-32 m-tb-5`}
                data-filter=".men"
                onClick={() => {
                  handleFilterByGender("man");
                }}>
                Men
              </button>

              <button
                className={`${
                  router.query.q === "belt" ? "how-active1" : ""
                } stext-106 cl6 hov1 bor3 trans-04 m-r-32 m-tb-5`}
                data-filter=".bag"
                onClick={() => {
                  handleFilterByQ("belt");
                }}>
                Belt
              </button>

              <button
                className={`${
                  router.query.q === "shoes" ? "how-active1" : ""
                } stext-106 cl6 hov1 bor3 trans-04 m-r-32 m-tb-5`}
                data-filter=".shoes"
                onClick={() => {
                  handleFilterByQ("shoes");
                }}>
                Shoes
              </button>

              <button
                className={`${
                  router.query.q === "watch" ? "how-active1" : ""
                } stext-106 cl6 hov1 bor3 trans-04 m-r-32 m-tb-5`}
                data-filter=".watches"
                onClick={() => {
                  handleFilterByQ("watch");
                }}>
                Watches
              </button>
            </div>

            <div className="flex-w flex-c-m m-tb-10">
              <div className="flex-c-m stext-106 cl6 size-105 bor4 pointer hov-btn3 trans-04 m-tb-4 js-show-search show-search">
                <i className="icon-search cl2 m-r-6 fs-15 trans-04 zmdi zmdi-search"></i>
                Search
              </div>
            </div>

            {/* search */}
            <div className="panel-search w-full p-t-10 p-b-15">
              <div className="bor8 dis-flex p-l-15">
                <button className="size-113 flex-c-m fs-16 cl2 hov-cl1 trans-04">
                  <i className="zmdi zmdi-search"></i>
                </button>

                <input
                  className="mtext-107 cl2 size-114 plh2 p-r-15"
                  type="text"
                  name="search-product"
                  placeholder="Search"
                  ref={searchRef}
                  onChange={() => {
                    filteringBySearchRefValue(searchRef.current?.value);
                  }}
                />
              </div>
            </div>
          </div>

          <div className="row isotope-grid">
            {productData.length < 1 ? (
              <p>There are no results for your search..</p>
            ) : (
              paginationProductsForDisplaying.map((product) => {
                return <ProductItem key={product.id} product={product} />;
              })
            )}
          </div>

          <div className="flex-l-m flex-w w-full p-t-10 m-lr--7">
            {Array.from({ length: totalPages }, (undefined, index) => (
              <a
                key={index}
                className={`flex-c-m how-pagination1 trans-04 m-all-7 pointer ${
                  currentPage === index + 1
                    ? "active-pagination1 text-white"
                    : ""
                }`}
                onClick={() => handlePage(index + 1)}>
                {index + 1}
              </a>
            ))}
          </div>
        </div>
      </div>
    </>
  );
};

export default Shop;

export const getServerSideProps: GetServerSideProps = async ({ query }) => {
  let productRes: Response;

  if (query.gender && query.q) {
    productRes = await fetch(
      `http://localhost:5001/products?gender_like=${query.gender}&q=${query.q}`
    );
  } else if (query.gender) {
    productRes = await fetch(
      `http://localhost:5001/products?gender_like=${query.gender}`
    );
  } else if (query.q) {
    productRes = await fetch(`http://localhost:5001/products?q=${query.q}`);
  } else {
    productRes = await fetch(`http://localhost:5001/products`);
  }

  const productData: ProductType[] = await productRes.json();

  return {
    props: { productData },
  };
};
